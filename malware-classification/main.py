# Copyright 2017 Abien Fred Agarap
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========================================================================

"""Main program implementing the deep learning algorithms"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

__version__ = "0.1.0"
__author__ = "Abien Fred Agarap"

from image_classifier import cnn
from cnn_svm import  cnn_Svm
from cnn_text import cnn_text
import numpy as np
from sklearn.model_selection import train_test_split
from utils.data import load_data
from utils.data import one_hot_encode

from tkinter import PhotoImage, INSERT, END
import tkinter.font as tkFont
import tkinter.font as font
import pymysql
import tkinter as tk
from tkinter import *
from tkinter import filedialog, messagebox, ttk
import os
import tensorflow as tf
import tensorflow.compat.v1 as tf1
tf1.disable_v2_behavior()
from keras.models import load_model
import cv2
import numpy as np


BATCH_SIZE = 256
CELL_SIZE = 256
DROPOUT_RATE = 0.85
LEARNING_RATE = 1e-3
NODE_SIZE = [512, 256, 128]
NUM_LAYERS = 5


# if __name__ == "__main__":
#     args = parse_args()

#     main(args)



# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


class GUIMAIN:
    folder_selected=''
    def gui(self):
    # Use a breakpoint in the code line below to debug your script.
    # print(f'Hi, {name}')  # Press Ctrl+F8 to toggle the breakpoint.
        root = tk.Tk()
        root.title("Malware Image Classifier")
        canvas = tk.Canvas(root, height="500", width="600", bg="white", bd="4")
        canvas.pack()


        myFont = font.Font(family='Helvetica', size="9", weight="bold")
        myFont1 = font.Font(family='Helvetica', size="13", weight="bold")
        myFont2 = font.Font(family='Helvetica', size="15", weight="bold")

        label = tk.Label(canvas, anchor="n", text="Malware image Classifier", width="20", font=("bold", 20))
        label.place(x=170, y=23)

    #In this function we will get path of dataset folder
        def showtextdataset():
            self.folder_selected = filedialog.askopenfilename()
            print(self.folder_selected)
            brows_1.insert(10,self.folder_selected)
    # fln = filedialog.askopenfilename(initialdir=os.getcwd(), title="Select Image File",
            #                                      filetypes=(("JPG File", "*.jpg"), ("PNG file", "*.png"), ("ALL Files", "*.*")))
            #     #img = Image.open(fln)
            #     #img = ImageTk.PhotoImage(img)
            #     #lbl.configure(image=img)
            #     #lbl.image = img

        my_tab = ttk.Notebook(canvas)
        my_tab.pack(pady="70")
        frame1 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame2 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame3 = tk.Frame(my_tab, width="700", height="1000", bg="gray")
        frame1.pack(fill="both", expand="0")
        frame2.pack(fill="both", expand="0")
        frame3.pack(fill="both", expand="0")
        bg1 =  PhotoImage(file = 'bg1.PNG')
        bg2 = PhotoImage(file = 'bg2.PNG')
        bg3= PhotoImage(file = 'bg3.PNG')

        label_img =Label(frame1,image=bg1)
        label_img.place(x=0,y=0,relwidth =1,relheight=1)



        my_tab.add(frame1, text="load image")
        my_tab.add(frame2, text="load TextFile")
        my_tab.add(frame3, text="Analyze")

        label_0 = tk.Label(frame1, width="20", text="Select Algorithm / model", bg="white")
        label_0['font'] = myFont1
        label_0.place(x=35, y=50)

        n = tk.StringVar()
        algorithm_choosen = ttk.Combobox(frame1, width=27,
                                    textvariable=n)

        # Adding combobox drop down list
        algorithm_choosen['values'] = ('cnn_svm',
                                       'cnn'
                                  )

        # Shows february as a default value
        # monthchoosen.current(0)
        algorithm_choosen.place(x="385", y="100")


        label_1 = tk.Label(frame1, width="20", text="Training Image DataSet", bg="white")
        label_1['font'] = myFont1
        label_1.place(x=35, y=180)

        brows = tk.Entry(frame1, width="50", bd="4.5")
        brows.place(x="90", y="220")
        def trainingdatasetimg():
            self.folder_selected = filedialog.askdirectory()
            print(self.folder_selected)
            brows.insert(10, self.folder_selected)

        def testingdatasetimg():
            self.folder_selected = filedialog.askdirectory()
            print(self.folder_selected)
            brows1_2.insert(10, self.folder_selected)

        Button_1 = tk.Button(frame1, text="Browse", width="20", bd="3", command=trainingdatasetimg)
        Button_1.place(x="420", y="220")
        Button_1['font'] = myFont

        label_1_2 = tk.Label(frame1, width="20", text="Validation Image DataSet", bg="white")
        label_1_2['font'] = myFont1
        label_1_2.place(x=35, y=280)

        brows1_2 = tk.Entry(frame1, width="50", bd="4.5")
        brows1_2.place(x="90", y="315")

        Button_1_2 = tk.Button(frame1, text="Browse", width="20", bd="3",command=testingdatasetimg)
        Button_1_2.place(x="420", y="315")
        Button_1_2['font'] = myFont
        def run_image_training():
            val = algorithm_choosen.get()
            if(val=='cnn'):

                path=brows.get()
                print(path)
                validationpath=brows1_2.get()
                r=cnn.cnn(path,validationpath)
                print(r)
            elif(val=='cnn_svm'):
                path = brows.get()
                print(path)
                validationpath = brows1_2.get()
                cnn_Svm.cnn_Svm(path,validationpath)


        Button_2 = tk.Button(frame1, text="Start Training",height="2", width="30", bd="3", command=run_image_training)
        Button_2.place(x="210", y="470")
        Button_2['font'] = myFont

        def showtextdataset():
            #Getting dataset path
            datasetpath=  filename =filedialog.askopenfilename()
            print(datasetpath)
            brows_1.insert(10, datasetpath)
            #Now Passing values to classifier.py file for further evaluation and calculation


        # Button_3 = tk.Button(frame1, text="Run Classifier", width="20", bd="3")
        # Button_3.place(x="350", y="190")
        # Button_3['font'] = myFont




            # Result = tk.Entry(frame1, width="50", bd="4")
            # Result.place(x="90", y="300")

        label_img_2 = Label(frame2, image=bg2)
        label_img_2.place(x=0, y=0, relwidth=1, relheight=1)

        label_2_1 = tk.Label(frame2, width="20", text="Select Algorithm / model", bg="white")
        label_2_1['font'] = myFont1
        label_2_1.place(x=35, y=50)

        n = tk.StringVar()
        monthchoosen = ttk.Combobox(frame2, width=27,
                                textvariable=n)

        # Adding combobox drop down list
        monthchoosen['values'] = (
                              'cnn_text'
                              )

        # Shows february as a default value
        # monthchoosen.current(0)
        monthchoosen.place(x="385", y="100")



        label_3 = tk.Label(frame2, width="20", text="Textual DataSet", bg="white")
        label_3['font'] = myFont1
        label_3.place(x=35, y=180)


        brows_1 = tk.Entry(frame2, width="50", bd="4.5")
        brows_1.place(x="90", y="220")

        Button_3 = tk.Button(frame2, text="Browse", width="20", bd="3", command=showtextdataset)
        Button_3.place(x="420", y="220")
        Button_3['font'] = myFont

        label_3 = tk.Label(frame2, width="20", text="Textual DataSet", bg="white")
        label_3['font'] = myFont1
        label_3.place(x=35, y=280)

        brows_2 = tk.Entry(frame2, width="50", bd="4.5")
        brows_2.place(x="90", y="315")
        def showtextlabels():
            # Getting dataset path
            labelspath = filedialog.askopenfilename()
            print(labelspath)
            brows_2.insert(10, labelspath)
            # Now Passing values to classifier.py file for further evaluation and calculation


        Button_3_2 = tk.Button(frame2, text="Browse", width="20", bd="3", command=showtextlabels)
        Button_3_2.place(x="420", y="315")
        Button_3_2['font'] = myFont
        def runclassifier_text():

            val = monthchoosen.get()
            if (val == 'cnn_text'):
                datasetpath = brows_1.get()
                print(datasetpath)
                labels = brows_2.get()
                cnn_text.cnn(datasetpath,labels)

        Button_4 = tk.Button(frame2, text="Run Classifier",height=2, width="30", bd="3",command=runclassifier_text)
        Button_4.place(x="210", y="470")
        Button_4['font'] = myFont

        # label_3 = tk.Label(frame2, width="20", text="Results", bg="white")
        # label_3['font'] = myFont2
        # label_3.place(x="13", y="270")
        #
        # frm = tk.Canvas(frame2, height="200", width="450", bg="white", bd="3")
        # frm.place(x="90", y="320")

        def testextdata():
            self.file_selected = filedialog.askopenfilename()
            model_selected = model_chooser.get()
            X = np.load(self.file_selected)
            if (model_selected == "cnn_text_trained"):
                X = np.reshape(X, [-1, 64, 64, 3])
                model = load_model('models/cnn_text.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                predictions = model.predict(X)
                print(predictions)
                #Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                pridict='x'
                if (classes == 0):
                    pridict="Adialer.C"
                elif (classes == 1):
                    predict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict="Allaple.L"
                elif (classes == 4):
                    pridict="Alueron.gen!J"
                elif (classes == 5):
                    pridict="Autorun.K"
                elif (classes == 6):
                    pridict="C2LOP.gen!g"
                elif (classes == 7):
                    pridict="C2LOP.P"
                elif (classes == 8):
                    pridict="Dialplatform.B"
                elif (classes == 9):
                    pridict="Dontovo.A"
                elif (classes == 10):
                    pridict="Fakerean"
                elif (classes == 11):
                    pridict="Instantaccess"
                elif (classes == 12):
                    pridict="Lolyda.AA1"
                elif (classes == 13):
                    pridict="Lolyda.AA2"
                elif (classes == 14):
                    pridict="Lolyda.AA3"
                elif (classes == 15):
                    pridict="Lolyda.AT"
                elif (classes == 16):
                    pridict="Malex.gen!J"
                elif (classes == 17):
                    pridict="Obfuscator.AD"
                elif (classes == 18):
                    pridict="Rbot!gen"
                elif (classes == 19):
                    pridict="Skintrim.N"
                elif (classes == 20):
                    pridict="Swizzor.gen!E'"
                elif (classes == 21):
                    pridict="Swizzor.gen!I"
                elif (classes == 22):
                    pridict="VB.AT"
                elif (classes == 23):
                    pridict="Wintrim.BX"
                elif (classes == 24):
                    pridict="Yuner.A"
                brows_3.delete("1.0","end")
                brows_3.insert("1.0", pridict)

            elif(model_selected == "cnn_svm_images_trained"):
                X = np.reshape(X, [1, 64, 64, 3])
                model = load_model('models/cnn_svm_images.h5')
                model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
                predictions = model.predict(X)
                print(predictions)
                # Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                # print(dict[classes])
                pridict = 'x'
                if (classes == 0):
                    pridict = "Adialer.C"
                elif (classes == 1):
                    predict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict = "Allaple.L"
                elif (classes == 4):
                    pridict = "Alueron.gen!J"
                elif (classes == 5):
                    pridict = "Autorun.K"
                elif (classes == 6):
                    pridict = "C2LOP.gen!g"
                elif (classes == 7):
                    pridict = "C2LOP.P"
                elif (classes == 8):
                    pridict = "Dialplatform.B"
                elif (classes == 9):
                    pridict = "Dontovo.A"
                elif (classes == 10):
                    pridict = "Fakerean"
                elif (classes == 11):
                    pridict = "Instantaccess"
                elif (classes == 12):
                    pridict = "Lolyda.AA1"
                elif (classes == 13):
                    pridict = "Lolyda.AA2"
                elif (classes == 14):
                    pridict = "Lolyda.AA3"
                elif (classes == 15):
                    pridict = "Lolyda.AT"
                elif (classes == 16):
                    pridict = "Malex.gen!J"
                elif (classes == 17):
                    pridict = "Obfuscator.AD"
                elif (classes == 18):
                    pridict = "Rbot!gen"
                elif (classes == 19):
                    pridict = "Skintrim.N"
                elif (classes == 20):
                    pridict = "Swizzor.gen!E'"
                elif (classes == 21):
                    pridict = "Swizzor.gen!I"
                elif (classes == 22):
                    pridict = "VB.AT"
                elif (classes == 23):
                    pridict = "Wintrim.BX"
                elif (classes == 24):
                    pridict = "Yuner.A"
                brows_3.delete("1.0", 'end')
                brows_3.insert("1.0", pridict)

            elif (model_selected == "cnn_images_trained"):
                X = np.reshape(X, [1, 64, 64, 3])
                model = load_model('models/cnn_images.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                predictions = model.predict(X)
                print(predictions)
                # Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                # print(dict[classes])
                pridict = 'x'
                if (classes == 0):
                    pridict = "Adialer.C"
                elif (classes == 1):
                    predict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict = "Allaple.L"
                elif (classes == 4):
                    pridict = "Alueron.gen!J"
                elif (classes == 5):
                    pridict = "Autorun.K"
                elif (classes == 6):
                    pridict = "C2LOP.gen!g"
                elif (classes == 7):
                    pridict = "C2LOP.P"
                elif (classes == 8):
                    pridict = "Dialplatform.B"
                elif (classes == 9):
                    pridict = "Dontovo.A"
                elif (classes == 10):
                    pridict = "Fakerean"
                elif (classes == 11):
                    pridict = "Instantaccess"
                elif (classes == 12):
                    pridict = "Lolyda.AA1"
                elif (classes == 13):
                    pridict = "Lolyda.AA2"
                elif (classes == 14):
                    pridict = "Lolyda.AA3"
                elif (classes == 15):
                    pridict = "Lolyda.AT"
                elif (classes == 16):
                    pridict = "Malex.gen!J"
                elif (classes == 17):
                    pridict = "Obfuscator.AD"
                elif (classes == 18):
                    pridict = "Rbot!gen"
                elif (classes == 19):
                    pridict = "Skintrim.N"
                elif (classes == 20):
                    pridict = "Swizzor.gen!E'"
                elif (classes == 21):
                    pridict = "Swizzor.gen!I"
                elif (classes == 22):
                    pridict = "VB.AT"
                elif (classes == 23):
                    pridict = "Wintrim.BX"
                elif (classes == 24):
                    pridict = "Yuner.A"
                brows_3.delete("1.0", 'end')
                brows_3.insert("1.0", pridict)
        Button_5 = tk.Button(frame3,text="Analyze Text Data", width="20", bd="3",command=testextdata)
        Button_5.place(x="90", y="130")
        Button_5['font'] = myFont

        def testimage():
            self.file_selected = filedialog.askopenfilename()
            model_selected = model_chooser.get()
            # img = cv2.imread('CNN.model/twist institution 14.jpg')
            img = cv2.imread(self.file_selected)
            img = cv2.resize(img, (64, 64))



            if(model_selected=="cnn_svm_images_trained"):
                img = np.reshape(img, [1, 64, 64, 3])
                model = load_model('models/cnn_svm_images.h5')
                model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
                predictions = model.predict(img)
                print(predictions)
                # Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                # print(dict[classes])
                pridict='x'
                if (classes == 0):
                    pridict="Adialer.C"
                elif (classes == 1):
                    predict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict="Allaple.L"
                elif (classes == 4):
                    pridict="Alueron.gen!J"
                elif (classes == 5):
                    pridict="Autorun.K"
                elif (classes == 6):
                    pridict="C2LOP.gen!g"
                elif (classes == 7):
                    pridict="C2LOP.P"
                elif (classes == 8):
                    pridict="Dialplatform.B"
                elif (classes == 9):
                    pridict="Dontovo.A"
                elif (classes == 10):
                    pridict="Fakerean"
                elif (classes == 11):
                    pridict="Instantaccess"
                elif (classes == 12):
                    pridict="Lolyda.AA1"
                elif (classes == 13):
                    pridict="Lolyda.AA2"
                elif (classes == 14):
                    pridict="Lolyda.AA3"
                elif (classes == 15):
                    pridict="Lolyda.AT"
                elif (classes == 16):
                    pridict="Malex.gen!J"
                elif (classes == 17):
                    pridict="Obfuscator.AD"
                elif (classes == 18):
                    pridict="Rbot!gen"
                elif (classes == 19):
                    pridict="Skintrim.N"
                elif (classes == 20):
                    pridict="Swizzor.gen!E'"
                elif (classes == 21):
                    pridict="Swizzor.gen!I"
                elif (classes == 22):
                    pridict="VB.AT"
                elif (classes == 23):
                    pridict="Wintrim.BX"
                elif (classes == 24):
                    pridict="Yuner.A"
                brows_3.delete("1.0",'end')
                brows_3.insert("1.0",pridict)

            elif(model_selected=="cnn_images_trained"):
                img = np.reshape(img, [1, 64, 64, 3])
                model = load_model('models/cnn_images.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                predictions = model.predict(img)
                print(predictions)
                # Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                # print(dict[classes])
                pridict = 'x'
                if (classes == 0):
                    pridict = "Adialer.C"
                elif (classes == 1):
                    pridict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict = "Allaple.L"
                elif (classes == 4):
                    pridict = "Alueron.gen!J"
                elif (classes == 5):
                    pridict = "Autorun.K"
                elif (classes == 6):
                    pridict = "C2LOP.gen!g"
                elif (classes == 7):
                    pridict = "C2LOP.P"
                elif (classes == 8):
                    pridict = "Dialplatform.B"
                elif (classes == 9):
                    pridict = "Dontovo.A"
                elif (classes == 10):
                    pridict = "Fakerean"
                elif (classes == 11):
                    pridict = "Instantaccess"
                elif (classes == 12):
                    pridict = "Lolyda.AA1"
                elif (classes == 13):
                    pridict = "Lolyda.AA2"
                elif (classes == 14):
                    pridict = "Lolyda.AA3"
                elif (classes == 15):
                    pridict = "Lolyda.AT"
                elif (classes == 16):
                    pridict = "Malex.gen!J"
                elif (classes == 17):
                    pridict = "Obfuscator.AD"
                elif (classes == 18):
                    pridict = "Rbot!gen"
                elif (classes == 19):
                    pridict = "Skintrim.N"
                elif (classes == 20):
                    pridict = "Swizzor.gen!E'"
                elif (classes == 21):
                    pridict = "Swizzor.gen!I"
                elif (classes == 22):
                    pridict = "VB.AT"
                elif (classes == 23):
                    pridict = "Wintrim.BX"
                elif (classes == 24):
                    pridict = "Yuner.A"
                brows_3.delete("1.0","end")
                brows_3.insert("1.0", pridict)
            elif (model_selected == "cnn_text_trained"):
                img = np.reshape(img, [-1, 64, 64, 3])
                model = load_model('models/cnn_text.h5')
                model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

                predictions = model.predict(img)
                print(predictions)
                # Generate arg maxes for predictions
                classes = predictions.argmax(axis=-1)
                print(classes)
                # print(dict[classes])
                pridict = 'x'
                if (classes == 0):
                    pridict = "Adialer.C"
                elif (classes == 1):
                    predict="Agent.FYI"
                elif (classes == 2):
                    pridict = "Allaple.A"
                elif (classes == 3):
                    pridict = "Allaple.L"
                elif (classes == 4):
                    pridict = "Alueron.gen!J"
                elif (classes == 5):
                    pridict = "Autorun.K"
                elif (classes == 6):
                    pridict = "C2LOP.gen!g"
                elif (classes == 7):
                    pridict = "C2LOP.P"
                elif (classes == 8):
                    pridict = "Dialplatform.B"
                elif (classes == 9):
                    pridict = "Dontovo.A"
                elif (classes == 10):
                    pridict = "Fakerean"
                elif (classes == 11):
                    pridict = "Instantaccess"
                elif (classes == 12):
                    pridict = "Lolyda.AA1"
                elif (classes == 13):
                    pridict = "Lolyda.AA2"
                elif (classes == 14):
                    pridict = "Lolyda.AA3"
                elif (classes == 15):
                    pridict = "Lolyda.AT"
                elif (classes == 16):
                    pridict = "Malex.gen!J"
                elif (classes == 17):
                    pridict = "Obfuscator.AD"
                elif (classes == 18):
                    pridict = "Rbot!gen"
                elif (classes == 19):
                    pridict = "Skintrim.N"
                elif (classes == 20):
                    pridict = "Swizzor.gen!E'"
                elif (classes == 21):
                    pridict = "Swizzor.gen!I"
                elif (classes == 22):
                    pridict = "VB.AT"
                elif (classes == 23):
                    pridict = "Wintrim.BX"
                elif (classes == 24):
                    pridict = "Yuner.A"
                brows_3.delete("1.0", 'end')
                brows_3.insert("1.0", pridict)

        label_img_3 = Label(frame3, image=bg3)
        label_img_3.place(x=0, y=0, relwidth=1, relheight=1)


        label_3_1 = tk.Label(frame3, width="20", text="Select model", bg="white")
        label_3_1['font'] = myFont1
        label_3_1.place(x=90, y=50)
        n = tk.StringVar()
        model_chooser = ttk.Combobox(frame3, width=33,
                                    textvariable=n)

        # Adding combobox drop down list
        model_chooser['values'] = ('cnn_svm_images_trained',
                                  'cnn_images_trained',
                                   'cnn_text_trained'
                                  )

        # Shows february as a default value
        # monthchoosen.current(0)
        model_chooser.place(x="350", y="90")

        Button_6 = tk.Button(frame3, text="Analyze Image Data", width="30", bd="3",command=testimage)
        Button_6.place(x="355", y="230")
        Button_6['font'] = myFont

        Button_5 = tk.Button(frame3, text="Analyze Text Data ", width="30", bd="3",command=testextdata)
        Button_5.place(x="90", y="230")
        Button_5['font'] = myFont
        # Button_7 = tk.Button(frame3, text="Eval Text Report ", width="20", bd="3")
        # Button_7.place(x="90", y="180")
        # Button_7['font'] = myFont
        #
        # Button_8 = tk.Button(frame3, text="Eval Image Report ", width="20", bd="3")
        # Button_8.place(x="350", y="180")
        # Button_8['font'] = myFont

        brows_3 =tk.Text(frame3, height=7,width=40)
        brows_3.place(x="180",y="280")



        user = 'root'
        password = ''
        host = 'localhost'
        database = 'logotypedb'

        # con = pymysql.connect(host="localhost",user= "root",password= "shuja123@", database="Malware")
        con = pymysql.connect(host="localhost",user= "root",password= "", database="logotypedb")

            #prepare a cursor object using cursor() method
        cursor = con.cursor()

            # execute SQL query using execute() method.
        cursor.execute("SELECT VERSION()")

            # Fetch a single row using fetchone() method.
        data = cursor.fetchone()
        print("Database version : %s " % data)

            # disconnect from server
        con.close()

        root.mainloop()


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
   g=GUIMAIN()
   g.gui()
