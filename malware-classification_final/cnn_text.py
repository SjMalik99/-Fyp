#import statements

''' For Ducumentation refer to Model Documentation.docx'''
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
class cnn_text():
        def cnn(features,labels):
                X = np.load(features)
                Y = np.load(labels)
                print(X.shape)
                print(Y.shape)
                # initialising sequential model and adding layers to it
                cnn = tf.keras.models.Sequential()
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Flatten())
                cnn.add(tf.keras.layers.Dense(128, activation='relu'))
                cnn.add(tf.keras.layers.Dense(64, activation='relu'))
                cnn.add(tf.keras.layers.Dense(25, activation='softmax'))

                # finally compile and train the cnn
                #For binary
                # cnn.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
                #for multile classes
                cnn.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                cnn.fit(X, Y, epochs=10, validation_split=0.20)
                # cnn.fit(x=train_generator, epochs=40)


                model = cnn
                model.save("models\cnn_text.h5")
