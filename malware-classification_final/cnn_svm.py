# Convolutional Neural Network

# Importing the libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Activation, Dense
from tensorflow.keras.optimizers import Adam
class cnn_Svm():
    def cnn_Svm(path,validationpath):

        # Part 1 - Data Preprocessing

        # Preprocessing the Training set
        train_datagen = ImageDataGenerator(
                                          )

        training_set = train_datagen.flow_from_directory(path,
                                                         target_size = (64, 64),
                                                         batch_size = 32,
                                                         class_mode = 'sparse')

        # Preprocessing the Test set
        test_datagen = ImageDataGenerator()
        test_set = test_datagen.flow_from_directory( validationpath,
                                                    target_size = (64, 64),
                                                    batch_size = 32,
                                                    class_mode = 'sparse')

        from tensorflow.keras.regularizers import l2
        # Part 2 - Building the CNN
        # Initialising the CNN
        cnn = tf.keras.models.Sequential()
        cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu', input_shape=[64, 64, 3]))
        cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
        cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu'))
        cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
        cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu'))
        cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
        cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=4, activation='relu'))
        cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
        cnn.add(tf.keras.layers.Flatten())

        # Step 4 - Full Connection
        cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))

        ## for mulitclassification
        cnn.add(Dense(25, kernel_regularizer=tf.keras.regularizers.l2(0.01), activation
        ='softmax'))
        cnn.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
        # cnn.summary()
        # Training the CNN on the Training set and evaluating it on the Test set
        r = cnn.fit(x=training_set, validation_data=test_set, epochs=20)

        from tensorflow.keras.models import load_model

        cnn.save('models\cnn_svm_images.h5')
