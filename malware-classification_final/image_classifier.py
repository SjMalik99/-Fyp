#import statements

''' For Ducumentation refer to Model Documentation.docx'''
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import numpy as np
class cnn():
        def cnn(datasetpath,validationpath):
                # loading training data
                train_datagen = ImageDataGenerator()
                train_generator = train_datagen.flow_from_directory(
                        datasetpath,
                        target_size=(64, 64),
                        batch_size=32,
                        class_mode='sparse')

                # loading testing data
                test_datagen = ImageDataGenerator()
                test_generator = train_datagen.flow_from_directory(
                        validationpath,
                        target_size=(64, 64),
                        batch_size=32,
                        class_mode='sparse')

                # initialising sequential model and adding layers to it
                cnn = tf.keras.models.Sequential()
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu', input_shape=[64, 64, 3]))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=50, kernel_size=4, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=4, activation='relu'))
                cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))
                cnn.add(tf.keras.layers.Flatten())
                cnn.add(tf.keras.layers.Dense(128, activation='relu'))
                cnn.add(tf.keras.layers.Dense(64, activation='relu'))
                cnn.add(tf.keras.layers.Dense(25, activation='softmax'))

                # finally compile and train the cnn
                #For binary
                # cnn.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])
                #for multile classes
                cnn.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
                cnn.fit(x=train_generator, validation_data=test_generator, epochs=10)
                # cnn.fit(x=train_generator, epochs=40)


                model = cnn
                model.save("models/cnn_images.h5")