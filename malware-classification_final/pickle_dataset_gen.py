import os
import numpy as np
import cv2
import  matplotlib.pyplot as plt
import pickle
import random
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn import metrics

####### CODE FOR PREPARING DATASET FOR SVM STARTS HERE ###################
dir = "E:/malware-classification/malimg_paper_dataset_imgs"
categories=[]
data=[]
for catogery in os.listdir(dir):
    print(catogery)
    categories.append(catogery)
    print(categories)
    path = os.path.join(dir,catogery)
    #Converting name label to 0,1
    label = categories.index(catogery)
    print(categories.index(catogery))
    for img in os.listdir(path):
        imgpath=os.path.join(path,img)

        # cv2.imshow("image",petimage)
        try:
            petimage = cv2.imread(imgpath)
            features=cv2.resize(petimage,(64,64))
            #Image is 2D so converting it to 1D
            data.append([features,label])
        except Exception as e:
            pass

print(len(data))

#Now shuffling data for better results
import random
random.shuffle(data)


for sample in data:
    print(sample[1])


X = []
Y = []


IMG_SIZE=64
for features,label in data:
    X.append(features)
    Y.append(label)

print(X[0].reshape(1, IMG_SIZE, IMG_SIZE, 3))

X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)

import pickle
np.save('Pickled_dataset/features.npy',X)
np.save('Pickled_dataset/labels.npy',Y)

# pickle_out = open("X.pickle","wb")
# pickle.dump(X, pickle_out)
# pickle_out.close()
#
# pickle_out = open("y.pickle","wb")
# pickle.dump(y, pickle_out)
# pickle_out.close()
# X=[]#Features
# Y=[]#Labels
#
# for features,labels in data:
#     X.append(features)
#     Y.append(labels)
#
# #Convering X fetutres into numpy array
# X=np.array(X).reshape(-1,64,64,1)# Last one is for grayscale
#
#
# #Now we have data, saving it into picke file for later use
# pickle_out = open("Pickled_dataset/X.pickle","wb")
# pickle.dump(X,pickle_out)
# pickle_out.close()
#
# pickle_out = open("Pickled_dataset/Y.pickle","wb")
# pickle.dump(Y,pickle_out)
# pickle_out.close()
